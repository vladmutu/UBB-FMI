     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;Se da un sir de cuvinte s. Sa se construiasca sirul de octeti d, astfel incat d sa contina pentru fiecare pozitie din s:
    15                                      ;- numarul de biti de 0, daca numarul este negativ
    16                                      ;- numarul de biti de 1, daca numarul este pozitiv
    17 00000000 EAFF9100D0FF7F00            s dw -22, 145, -48, 127
    18                                      len equ ($-s)/2
    19 00000008 00<rept>                    d times len db 0
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ; ...
    24 00000000 B904000000                      mov ecx,len
    25 00000005 BE[00000000]                    mov esi,s
    26 0000000A BF[08000000]                    mov edi,d
    27 0000000F FC                              cld
    28 00000010 E331                            jecxz final
    29                                          repeta1:
    30 00000012 66AD                                lodsw
    31 00000014 6689C2                              mov dx,ax
    32 00000017 6681E20080                          and dx,1000000000000000b
    33 0000001C 66C1EA0F                            shr dx,15
    34 00000020 6683FA01                            cmp dx,1
    35 00000024 7503                                jne pozitiv
    36 00000026 66F7D0                              not ax
    37                                              pozitiv:
    38 00000029 51                                      push ecx
    39 0000002A B908000000                              mov ecx,8
    40 0000002F B200                                    mov dl,0
    41                                                  repeta2:
    42 00000031 D0EC                                        shr ah,1
    43 00000033 80D200                                      adc dl,0
    44 00000036 D0E8                                        shr al,1
    45 00000038 80D200                                      adc dl,0
    46 0000003B E2F4                                    loop repeta2
    47 0000003D 88D0                                    mov al,dl
    48 0000003F AA                                      stosb
    49 00000040 59                                      pop ecx
    50 00000041 E2CF                            loop repeta1
    51                                          final:
    52                                          ; exit(0)
    53 00000043 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    54 00000045 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
