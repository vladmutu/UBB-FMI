     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,fopen,fread,fclose,printf,scanf,fprintf              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import fopen msvcrt.dll
    10                                  import fread msvcrt.dll
    11                                  import fclose msvcrt.dll
    12                                  import printf msvcrt.dll
    13                                  import scanf msvcrt.dll
    14                                  import fprintf msvcrt.dll
    15                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    16                                  
    17                                  ; our data is declared here (the variables needed by our program)
    18                                  segment data use32 class=data
    19                                      ; ...
    20 00000000 696E7075745F312E74-         nume_fisier db "input_1.txt", 0
    20 00000009 787400             
    21 0000000C 7700                        mod_acces db "w", 0
    22 0000000E 00000000                    descriptor_fisier dd 0
    23                                      
    24 00000012 00000000                    val dd 0
    25 00000016 256400                      format_1 db "%d",0
    26 00000019 25632000                    format_2 db "%c ",0
    27                                  ; our code starts here
    28                                  segment code use32 class=code
    29                                      start:
    30                                          ; ...
    31                                          ;FILE * fopen(const char* nume_fisier,const char* mod_acces)
    32 00000000 68[0C000000]                    push dword mod_acces
    33 00000005 68[00000000]                    push dword nume_fisier
    34 0000000A FF15[00000000]                  call [fopen]
    35 00000010 83C408                          add esp, 4*2
    36                                          
    37 00000013 83F800                          cmp eax, 0
    38 00000016 7451                            je final
    39                                          
    40 00000018 A3[0E000000]                    mov [descriptor_fisier], eax
    41                                          
    42                                          
    43                                          repeta:
    44                                              ;citim valorile una cate una
    45 0000001D 68[12000000]                        push dword val
    46 00000022 68[16000000]                        push dword format_1
    47 00000027 FF15[00000000]                      call [scanf]
    48 0000002D 83C408                              add esp, 4*2
    49                                              
    50 00000030 A1[12000000]                        mov eax, [val]
    51 00000035 83F800                              cmp eax, 0
    52 00000038 7420                                je iesire
    53                                              
    54                                              ;int fprintf(FILE * stream, const char * format, <variabila_1>, <constanta_2>, <...>)
    55 0000003A 8B1D[12000000]                      mov ebx, [val]
    56 00000040 83C330                              add ebx, '0'
    57 00000043 53                                  push dword ebx
    58 00000044 68[19000000]                        push dword format_2
    59 00000049 FF35[0E000000]                      push dword [descriptor_fisier]
    60 0000004F FF15[00000000]                      call [fprintf]
    61 00000055 83C40C                              add esp, 4*3
    62                                              
    63 00000058 EBC3                                jmp repeta
    64                                              
    65                                          iesire:
    66                                          
    67                                          ;int fclose(FILE * descriptor)
    68 0000005A FF35[0E000000]                  push dword [descriptor_fisier]
    69 00000060 FF15[00000000]                  call [fclose]
    70 00000066 83C404                          add esp, 4*1
    71                                              
    72                                          final:
    73                                          ; exit(0)
    74 00000069 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    75 0000006B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
