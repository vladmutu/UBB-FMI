     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,fopen,fread,fclose,printf,fprintf              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import fopen msvcrt.dll
    10                                  import fread msvcrt.dll
    11                                  import fclose msvcrt.dll
    12                                  import printf msvcrt.dll
    13                                  import fprintf msvcrt.dll
    14                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    15                                  
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18                                      ; ...
    19 00000000 696E7075745F322E74-         nume_fisier db "input_2.txt", 0
    19 00000009 787400             
    20 0000000C 612B00                      mod_acces db "a+", 0
    21 0000000F 00000000                    descriptor_fisier dd 0
    22                                      
    23 00000013 <res 00000032>              sir resb 50
    24 00000045 00000000                    lungime_sir dd 0
    25 00000049 01000000                    dimensiune dd 1
    26 0000004D 64000000                    count dd 100
    27                                      
    28 00000051 0A000000                    zece dd 10
    29                                      
    30 00000055 FFFFFF7F                    nr_min dd 7fffffffh
    31 00000059 2C20256400                  format db ", %d", 0
    32                                  ; our code starts here
    33                                  segment code use32 class=code
    34                                      start:
    35                                          ; ...
    36                                          ;FILE * fopen(const char* nume_fisier,const char* mod_acces)
    37 00000000 68[0C000000]                    push dword mod_acces
    38 00000005 68[00000000]                    push dword nume_fisier
    39 0000000A FF15[00000000]                  call [fopen]
    40 00000010 83C408                          add esp, 4*2
    41                                          
    42 00000013 83F800                          cmp eax, 0
    43 00000016 0F849B000000                    je final
    44                                          
    45                                          
    46 0000001C A3[0F000000]                    mov [descriptor_fisier], eax 
    47                                          
    48                                          ;int fread(void * str, int size, int count, FILE * stream)
    49 00000021 FF35[0F000000]                  push dword [descriptor_fisier]
    50 00000027 FF35[4D000000]                  push dword [count]
    51 0000002D FF35[49000000]                  push dword [dimensiune]
    52 00000033 68[13000000]                    push dword sir
    53 00000038 FF15[00000000]                  call [fread]
    54 0000003E 83C410                          add esp, 4*4
    55                                          
    56 00000041 A3[45000000]                    mov [lungime_sir], eax
    57                                          
    58 00000046 BE[13000000]                    mov esi, sir
    59 0000004B 8B0D[45000000]                  mov ecx, [lungime_sir]
    60 00000051 FC                              cld
    61 00000052 B800000000                      mov eax, 0
    62                                          repeta:
    63 00000057 51                                  push ecx
    64 00000058 50                                  push eax
    65 00000059 AC                                  lodsb ;al
    66 0000005A 88C3                                mov bl, al
    67 0000005C 3C20                                cmp al, ' '
    68                                              
    69 0000005E 740E                                je next
    70 00000060 58                                      pop eax
    71 00000061 F725[51000000]                          mul dword [zece]
    72 00000067 80EB30                                  sub bl, '0'
    73 0000006A 00D8                                    add al, bl
    74 0000006C EB13                                    jmp urm
    75                                              next:
    76 0000006E 58                                      pop eax
    77 0000006F 3B05[55000000]                          cmp eax, [nr_min]
    78 00000075 7D05                                        jge salt 
    79 00000077 A3[55000000]                                    mov [nr_min], eax
    80                                                      salt:
    81 0000007C B800000000                              mov eax, 0
    82                                              urm:
    83 00000081 59                                  pop ecx
    84 00000082 E2D3                                loop repeta
    85 00000084 83EE01                          sub esi, 1
    86 00000087 B800000000                      mov eax, 0
    87 0000008C AC                              lodsb
    88 0000008D 2C30                            sub al, '0'
    89 0000008F 3B05[55000000]                  cmp eax, [nr_min]
    90 00000095 7D05                            jge salt_1
    91 00000097 A3[55000000]                        mov [nr_min], eax
    92                                          salt_1:
    93                                          
    94                                          ;int fprintf(FILE * stream, const char * format, <variabila_1>, <constanta_2>, <...>)
    95 0000009C 8B1D[55000000]                  mov ebx, [nr_min]
    96 000000A2 53                              push dword ebx
    97 000000A3 68[59000000]                    push dword format
    98 000000A8 FF35[0F000000]                  push dword [descriptor_fisier]
    99 000000AE FF15[00000000]                  call [fprintf]
   100 000000B4 83C40C                          add esp, 4*3
   101                                          
   102                                          final:
   103                                          ; exit(0)
   104 000000B7 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   105 000000B9 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
