     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      ;Se dau 2 siruri de octeti A si B. Sa se construiasca sirul R care sa contina elementele lui B 
    15                                      ;in ordine inversa urmate de elementele in ordine inversa ale lui A
    16 00000000 0201FD00                    a db 2, 1, -3, 0
    17                                      L1 equ $-a
    18 00000004 040507060201                b db 4, 5, 7, 6, 2, 1
    19                                      L2 equ $-b
    20 0000000A 00<rept>                    r times L1+L2 db 0
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; ...
    25                                          ;a[i] ->r[L1-i]
    26 00000000 B904000000                      mov ecx,L1
    27 00000005 E33C                            jecxz final
    28 00000007 BE00000000                      mov esi,0
    29 0000000C BF04000000                      mov edi,L1
    30                                          repeta1:
    31 00000011 8A86[00000000]                      mov al,[a+esi]
    32 00000017 8887[0A000000]                      mov [r+edi],al
    33 0000001D 4F                                  dec edi 
    34 0000001E 46                                  inc esi
    35 0000001F E2F0                            loop repeta1
    36                                          ;b[i] -> r[L1+L2-i]
    37 00000021 B906000000                      mov ecx,L2
    38 00000026 E31B                            jecxz final
    39 00000028 BE00000000                      mov esi,0
    40 0000002D 83C704                          add edi,L1
    41 00000030 83C706                          add edi,L2
    42                                          repeta2:
    43 00000033 8A86[04000000]                      mov al,[b+esi]
    44 00000039 8887[0A000000]                      mov [r+edi],al
    45 0000003F 4F                                  dec edi
    46 00000040 46                                  inc esi
    47 00000041 E2F0                            loop repeta2
    48                                          final:
    49                                          ; exit(0)
    50 00000043 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    51 00000045 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
