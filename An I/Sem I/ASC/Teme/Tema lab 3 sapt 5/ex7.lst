     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 05000000                    a dd 5
    15 00000004 02                          b db 2
    16 00000005 02                          c db 2
    17 00000006 01                          d db 1
    18 00000007 0100000000000000            x dq 1
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23                                          ;a-(7+x)/(b*b-c/d+2); a-doubleword; b,c,d-byte; x-qword
    24                                          ;fara semn
    25 00000000 A1[07000000]                    mov eax, [x]
    26 00000005 8B15[0B000000]                  mov edx, [x+4];edx:eax=x
    27 0000000B 50                              push eax
    28 0000000C 52                              push edx
    29                                          ;stiva
    30                                          ;edx
    31                                          ;eax
    32 0000000D A0[04000000]                    mov al,[b]
    33 00000012 F6E0                            mul al;ax=b*b
    34 00000014 6650                            push ax
    35                                          ;stiva
    36                                          ;ax
    37                                          ;edx
    38                                          ;eax
    39 00000016 A0[05000000]                    mov al,[c]
    40 0000001B 6698                            cbw;ax=c
    41 0000001D 8A35[06000000]                  mov dh,[d];dh=d
    42 00000023 F6F6                            div dh;al=c/d ah=c%d
    43 00000025 6698                            cbw;ax=c/d
    44 00000027 88E3                            mov bl,ah;bl=c%d
    45 00000029 6689C1                          mov cx,ax;cx=c/d
    46 0000002C 6658                            pop ax;ax=b*b
    47                                          ;stiva
    48                                          ;edx
    49                                          ;eax
    50 0000002E 6629C8                          sub ax,cx;ax=b*b-c/d
    51 00000031 6683C002                        add ax,2;ax=b*b-c/d+2
    52 00000035 98                              cwde;eax=b*b-c/d+2
    53 00000036 89C1                            mov ecx,eax;ecx=b*b-c/d+2
    54 00000038 5A                              pop edx
    55 00000039 58                              pop eax;edx:eax=x
    56 0000003A 83C007                          add eax,7
    57 0000003D 83D200                          adc edx,0;edx:eax=7+x
    58 00000040 F7F1                            div ecx;eax=(7+x)/(b*b-c/d+2) ,edx=(7+x)%(b*b-c/d+2)
    59 00000042 8B0D[00000000]                  mov ecx,[a];ecx=a
    60 00000048 29C1                            sub ecx,eax;ecx=a-(7+x)/(b*b-c/d+2)
    61 0000004A 89C8                            mov eax,ecx;eax=a-(7+x)/(b*b-c/d+2)
    62                                          
    63                                          
    64                                          
    65                                          
    66                                          ; exit(0)
    67 0000004C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    68 0000004E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
