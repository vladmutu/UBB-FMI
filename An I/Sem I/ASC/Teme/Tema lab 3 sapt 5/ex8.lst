     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 08000000                    a dd 8
    15 00000004 02                          b db 2
    16 00000005 05                          c db 5
    17 00000006 01                          d db 1
    18 00000007 0100000000000000            x dq 1
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23                                          ;a-(7+x)/(b*b-c/d+2); a-doubleword; b,c,d-byte; x-qword
    24                                          ;5-(7+1)/(2*2-(5/1)+2)=-3
    25                                          ;cu semn
    26 00000000 A1[07000000]                    mov eax, dword [x]
    27 00000005 8B15[0B000000]                  mov edx, dword [x+4];edx:eax=x
    28 0000000B 50                              push eax
    29 0000000C 52                              push edx
    30                                          ;stiva
    31                                          ;edx
    32                                          ;eax
    33 0000000D A0[04000000]                    mov al,[b]
    34 00000012 F6E8                            imul al;ax=b*b
    35 00000014 6650                            push ax
    36                                          ;stiva
    37                                          ;ax
    38                                          ;edx
    39                                          ;eax
    40 00000016 A0[05000000]                    mov al,[c]
    41 0000001B 6698                            cbw;ax=c
    42 0000001D 8A35[06000000]                  mov dh,[d];dh=d
    43 00000023 F6FE                            idiv dh;al=c/d ah=c%d
    44 00000025 6698                            cbw;ax=c/d
    45 00000027 88E3                            mov bl,ah;bl=c%d
    46 00000029 6689C1                          mov cx,ax;cx=c/d
    47 0000002C 6658                            pop ax;ax=b*b
    48                                          ;stiva
    49                                          ;edx
    50                                          ;eax
    51 0000002E 6629C8                          sub ax,cx;ax=b*b-c/d
    52 00000031 6683C002                        add ax,2;ax=b*b-c/d+2
    53 00000035 98                              cwde;eax=b*b-c/d+2
    54 00000036 89C1                            mov ecx,eax;ecx=b*b-c/d+2
    55 00000038 5A                              pop edx
    56 00000039 58                              pop eax;edx:eax=x
    57 0000003A 83C007                          add eax,7
    58 0000003D 83D200                          adc edx,0;edx:eax=7+x
    59 00000040 F7F9                            idiv ecx;eax=(7+x)/(b*b-c/d+2) ,edx=(7+x)%(b*b-c/d+2)
    60 00000042 8B0D[00000000]                  mov ecx,[a];ecx=a
    61 00000048 29C1                            sub ecx,eax;ecx=a-(7+x)/(b*b-c/d+2)
    62 0000004A 89C8                            mov eax,ecx;eax=a-(7+x)/(b*b-c/d+2)
    63                                          ; exit(0)
    64 0000004C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    65 0000004E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
