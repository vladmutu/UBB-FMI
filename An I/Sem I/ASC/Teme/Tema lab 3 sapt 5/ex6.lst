     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 02                          a db 2
    15 00000001 04                          b db 4
    16 00000002 0100                        c dw 1
    17 00000004 01000000                    e dd 1
    18 00000008 1A00000000000000            x dq 26
    19                                      
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ; ...
    24                                          ;(a-b+c*128)/(a+b)+e-x; a,b-byte; c-word; e-doubleword; x-qword
    25                                          ;(2-4+1*128)/(4+2)+1-26=-4
    26                                          ;cu semn
    27 00000000 B800000000                      mov eax,0
    28 00000005 A0[00000000]                    mov al, [a] ;al=a
    29 0000000A 8A15[01000000]                  mov dl, [b] ;dl=b
    30 00000010 28D0                            sub al,dl ;al=a-b
    31 00000012 6698                            cbw;ax=a-b
    32 00000014 6650                            push ax;
    33                                          ;stiva
    34                                          ;ax
    35 00000016 66A1[02000000]                  mov ax,[c]
    36 0000001C 66BB8000                        mov bx, 128
    37 00000020 66F7EB                          imul bx
    38 00000023 665B                            pop bx
    39                                          ;stiva
    40                                          ;
    41 00000025 6601D8                          add ax,bx;ax=a-b+c*128
    42                                          
    43 00000028 6650                            push ax
    44                                          ;stiva
    45                                          ;ax
    46                                          
    47 0000002A A0[00000000]                    mov al,[a]
    48 0000002F 8A1D[01000000]                  mov bl,[b]
    49 00000035 00D8                            add al,bl;al=a+b
    50                                          
    51 00000037 88C2                            mov dl,al;dl=a+b
    52                                          
    53 00000039 6658                            pop ax;a=a-b+c*128
    54 0000003B F6FA                            idiv dl ; 
    55 0000003D 6650                            push ax;ax={ah=(a-b+c*128)%(a+b),al=(a-b+c*128)/(a+b)}
    56                                          ;stiva
    57                                          ;ax={ah=(a-b+c*128)%(a+b),al=(a-b+c*128)/(a+b)}
    58 0000003F A1[04000000]                    mov eax,[e]
    59 00000044 99                              cdq ;edx:eax=e
    60 00000045 8B1D[08000000]                  mov ebx, dword [x]
    61 0000004B 8B0D[0C000000]                  mov ecx, dword [x+4] ;ecx:ebx=x
    62 00000051 29D8                            sub eax,ebx
    63 00000053 19CA                            sbb edx,ecx ;edx:eax=e-x
    64 00000055 665B                            pop bx;bx={ah=(a-b+c*128)%(a+b),al=(a-b+c*128)/(a+b)}
    65 00000057 50                              push eax
    66 00000058 52                              push edx
    67                                          ;stiva
    68                                          ;edx
    69                                          ;eax e-x
    70 00000059 6689D8                          mov ax,bx;ax={ah=(a-b+c*128)%(a+b),al=(a-b+c*128)/(a+b)}
    71 0000005C 88E6                            mov dh,ah
    72 0000005E 6698                            cbw
    73 00000060 98                              cwde
    74 00000061 59                              pop ecx
    75 00000062 5B                              pop ebx
    76 00000063 01D8                            add eax,ebx
    77 00000065 88F7                            mov bh,dh
    78 00000067 BA00000000                      mov edx,0
    79 0000006C 11CA                            adc edx,ecx
    80                                          
    81                                          
    82                                          
    83                                          ; exit(0)
    84 0000006E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    85 00000070 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
