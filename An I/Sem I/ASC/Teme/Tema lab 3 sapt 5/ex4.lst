     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 0A                          a db 10
    15 00000001 0300                        b dw 3
    16 00000003 01000000                    c dd 1
    17 00000007 1000000000000000            d dq 16
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ;24
    22                                          ;(a+b+c)-d+(b-c)=(4+3+1)-16+(3-1)=-6
    23                                          ; ...
    24 00000000 A0[00000000]                    mov al,[a]
    25 00000005 6698                            cbw
    26 00000007 660305[01000000]                add ax,[b]
    27 0000000E 98                              cwde
    28 0000000F 0305[03000000]                  add eax,[c];eax=(a+b+c)
    29 00000015 50                              push eax
    30 00000016 A1[07000000]                    mov eax,dword [d]
    31 0000001B 8B15[0B000000]                  mov edx,dword [d+4]
    32 00000021 89C3                            mov ebx,eax
    33 00000023 89D1                            mov ecx,edx ;ecx:ebx=d
    34 00000025 58                              pop eax
    35 00000026 99                              cdq ;edx:eax=(a+b+c)
    36 00000027 29D8                            sub eax,ebx
    37 00000029 19CA                            sbb edx,ecx ;edx:eax=(a+b+c)-d
    38 0000002B 50                              push eax
    39 0000002C 52                              push edx
    40 0000002D 66A1[01000000]                  mov ax,[b]
    41 00000033 98                              cwde
    42 00000034 2B05[03000000]                  sub eax,[c]
    43 0000003A 89C3                            mov ebx,eax
    44 0000003C 5A                              pop edx
    45 0000003D 58                              pop eax
    46 0000003E 01D8                            add eax,ebx
    47 00000040 83D200                          adc edx,0;edx:eax=(a+b+c)-d+(b-c)
    48                                          
    49                                          
    50                                          ; exit(0)
    51 00000043 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    52 00000045 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
