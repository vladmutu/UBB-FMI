     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,scanf,printf,fopen,fread,fclose               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import scanf msvcrt.dll
    10                                  import printf msvcrt.dll
    11                                  import fopen msvcrt.dll
    12                                  import fread msvcrt.dll
    13                                  import fclose msvcrt.dll
    14                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    15                                  
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18                                      ; ...
    19 00000000 00                          nume_fisier db 0
    20 00000001 00000000                    descriptor_fisier dd 0
    21 00000005 00000000                    n dd 0 
    22 00000009 496E74726F64756365-         message_1 db "Introduceti numarul n: ", 0
    22 00000012 7469206E756D617275-
    22 0000001B 6C206E3A2000       
    23 00000021 496E74726F64756365-         message_2 db "Introduceti numele fisierului: ", 0
    23 0000002A 7469206E756D656C65-
    23 00000033 20666973696572756C-
    23 0000003C 75693A2000         
    24 00000041 256400                      format_1 db "%d", 0
    25 00000044 257300                      format_2 db "%s", 0
    26 00000047 7200                        mod_acces db "r", 0
    27 00000049 <res 00000064>              sir resb 100
    28 000000AD 01000000                    dimensiune dd 1
    29 000000B1 64000000                    count dd 100
    30 000000B5 00                          lungime_sir db 0
    31 000000B6 01000000                    masca dd 01h
    32                                      dif equ 0
    33 000000BA 20                          spatiu db ' '
    34 000000BB 00000000                    len dd 0
    35                                  ; our code starts here
    36                                  segment code use32 class=code
    37                                      start:
    38                                          ; ...
    39 00000000 68[09000000]                    push dword message_1
    40 00000005 FF15[00000000]                  call [printf]
    41 0000000B 83C404                          add esp, 4
    42                                          
    43 0000000E 68[05000000]                    push dword n
    44 00000013 68[41000000]                    push dword format_1
    45 00000018 FF15[00000000]                  call [scanf]
    46 0000001E 83C408                          add esp, 4*2
    47                                          
    48 00000021 68[21000000]                    push dword message_2
    49 00000026 FF15[00000000]                  call [printf]
    50 0000002C 83C404                          add esp, 4
    51                                          
    52 0000002F 68[00000000]                    push dword nume_fisier
    53 00000034 68[44000000]                    push dword format_2
    54 00000039 FF15[00000000]                  call [scanf]
    55 0000003F 83C408                          add esp, 4*2
    56                                          
    57 00000042 68[47000000]                    push dword mod_acces
    58 00000047 68[00000000]                    push dword nume_fisier
    59 0000004C FF15[00000000]                  call [fopen]
    60 00000052 83C408                          add esp, 4*2
    61                                          
    62 00000055 83F800                          cmp eax, 0
    63 00000058 0F84C0000000                    je final
    64                                          
    65 0000005E A3[01000000]                    mov [descriptor_fisier], eax
    66                                          
    67 00000063 FF35[01000000]                  push dword [descriptor_fisier]
    68 00000069 FF35[B1000000]                  push dword [count]
    69 0000006F FF35[AD000000]                  push dword [dimensiune]
    70 00000075 68[49000000]                    push dword sir
    71 0000007A FF15[00000000]                  call [fread]
    72 00000080 83C410                          add esp, 4*4
    73                                          
    74 00000083 A3[B5000000]                    mov [lungime_sir], eax
    75                                          
    76 00000088 BE[49000000]                    mov esi, sir
    77 0000008D FC                              cld
    78 0000008E 8B0D[B5000000]                  mov ecx, [lungime_sir]
    79 00000094 E388                            jecxz final
    79          ******************       warning: byte data exceeds bounds [-w+number-overflow]
    80 00000096 BB00000000                      mov ebx, 0
    81                                          repeta:
    82                                              
    83 0000009B AC                                  lodsb
    84 0000009C 3C20                                cmp al, ' '
    85 0000009E 740B                                je gata
    86 000000A0 3C30                                cmp al, '0'
    87 000000A2 7269                                jb urm
    88 000000A4 3C39                                cmp al, '9'
    89 000000A6 7765                                ja urm
    90 000000A8 43                                  inc ebx
    91                                              
    92 000000A9 EB62                                jmp urm
    93                                              
    94                                              gata: 
    95 000000AB 891D[BB000000]                      mov [len], ebx
    96 000000B1 BB00000000                          mov ebx, 0
    97 000000B6 8A56FE                              mov dl, [esi-2]
    98 000000B9 2215[B6000000]                      and dl, [masca]
    99 000000BF 80FA00                              cmp dl, 0
   100 000000C2 7549                                jne urm
   101 000000C4 8B1D[BB000000]                      mov ebx, [len]
   102 000000CA 3B1D[05000000]                      cmp ebx, [n] 
   103 000000D0 BB00000000                          mov ebx, 0
   104 000000D5 7402                                je afisare
   105 000000D7 EB34                                jmp urm
   106                                              afisare:
   107                                              
   108 000000D9 51                                  push ecx
   109 000000DA 8B0D[BB000000]                      mov ecx,[len]
   110                                              
   111                                              repeta2:
   112                                              
   113 000000E0 83C101                                  add ecx, 1
   114 000000E3 890D00000000                            mov [dif], ecx
   115 000000E9 83E901                                  sub ecx, 1 
   116 000000EC FF36                                    push dword [esi-dif]
   117 000000EE 68[41000000]                            push dword format_1
   118 000000F3 FF15[00000000]                          call [printf]
   119 000000F9 83C408                                  add esp, 4*2
   120                                              
   121 000000FC E29D                                loop repeta
   122 000000FE 59                                  pop ecx
   123 000000FF 68[BA000000]                        push dword spatiu
   124 00000104 FF15[00000000]                      call [printf]
   125 0000010A 83C404                              add esp, 4
   126                                              
   127                                              urm:
   128 0000010D E28C                            loop repeta
   129                                          
   130 0000010F FF35[01000000]                  push dword [descriptor_fisier]
   131 00000115 FF15[00000000]                  call [fclose]
   132 0000011B 83C404                          add esp, 4
   133                                          
   134                                          final:
   135                                          ; exit(0)
   136 0000011E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   137 00000120 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
