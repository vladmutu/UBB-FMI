     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 0200                        a dw 2
    15 00000002 FD                          b db -3
    16 00000003 FCFFFFFF                    c dd -4
    17 00000007 0500000000000000            x dq 5
    18                                    ;(a*a+b+x)/(b+b)+c*c  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23 00000000 66A1[00000000]                  mov ax,[a]
    24 00000006 66F72D[00000000]                imul word [a]; rezultatul e in dx:ax
    25 0000000D 6652                            push dx
    26 0000000F 6650                            push ax
    27 00000011 5B                              pop ebx ; ebx=a*a=4
    28 00000012 A0[02000000]                    mov al, [b]
    29 00000017 6698                            cbw; ax=b
    30 00000019 98                              cwde ;eax=b
    31 0000001A 01D8                            add eax,ebx ;eax=a*a+b=1
    32 0000001C 99                              cdq
    33 0000001D 8B1D[07000000]                  mov ebx, [x]
    34 00000023 8B0D[0B000000]                  mov ecx, [x+4] ;edx:ebx=x=5
    35 00000029 F8                              clc
    36 0000002A 01D8                            add eax,ebx
    37 0000002C 11CA                            adc edx,ecx
    38 0000002E 50                              push eax
    39 0000002F A0[02000000]                    mov al, [b]
    40 00000034 0205[02000000]                  add al, [b]
    41 0000003A 6698                            cbw
    42 0000003C 98                              cwde
    43 0000003D 89C3                            mov ebx,eax
    44 0000003F 58                              pop eax
    45 00000040 F7FB                            idiv ebx ;eax =(a*a+b+x)/(b+b)
    46 00000042 99                              cdq ;edx:eax=(a*a+b+x)/(b+b)
    47 00000043 89C3                            mov ebx,eax
    48 00000045 89D1                            mov ecx,edx ;ecx:ebx=(a*a+b+x)/(b+b)
    49 00000047 A1[03000000]                    mov eax,[c]
    50 0000004C F72D[03000000]                  imul dword [c]; edx:eax=c*c
    51 00000052 01D8                            add eax,ebx
    52 00000054 11CA                            adc edx,ecx
    53                                          ; exit(0)
    54 00000056 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    55 00000058 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
