     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit,printf              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import printf msvcrt.dll
    10                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14                                      ; ...
    15 00000000 770000000000000000-         sir dq 1110111b, 100000000h, 0abcd0002e7fch, 5
    15 00000009 00000001000000FCE7-
    15 00000012 0200CDAB0000050000-
    15 0000001B 0000000000         
    16                                      len equ ($-sir)/8
    17 00000020 00000000                    len2 dd 0
    18 00000024 02000000                    check dd 2
    19 00000028 <res 00000028>              rez resd 10
    20 00000050 257300                      format db "%s", 0
    21 00000053 00<rept>                    sol times 100 db 0
    22 000000B7 00                          len3 db 0
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                          ; ...
    27 00000000 BE[00000000]                    mov esi, sir
    28 00000005 BF[28000000]                    mov edi, rez
    29 0000000A B904000000                      mov ecx, len
    30 0000000F E344                            jecxz final
    31                                      repeta_1:
    32 00000011 FC                              cld
    33 00000012 AD                              lodsd;eax am dublucuvantul inferior
    34 00000013 51                              push ecx
    35 00000014 50                              push eax
    36 00000015 BB00000000                      mov ebx, 0
    37 0000001A B909000000                      mov ecx, 9
    38                                          ;verificam de cat ori apare 111b in eax
    39                                      repeta_2:
    40 0000001F FC                              cld
    41 00000020 83F800                          cmp eax, 0
    42 00000023 7419                            je gata;daca e 0 am terminat cu asta
    43 00000025 88C2                            mov dl, al
    44 00000027 C0E205                          shl dl, 5
    45 0000002A C0EA05                          shr dl, 5
    46 0000002D 80FA07                          cmp dl, 7;punem in dl cei 3 biti izolati
    47 00000030 7508                            jne not_ok
    48 00000032 83C301                          add ebx, 1
    49 00000035 C1E803                          shr eax, 3
    50 00000038 EB02                            jmp salt
    51                                          not_ok:
    52 0000003A D1E8                            shr eax, 1
    53                                          salt:
    54                                          ;eliminam cei mai din dreapta 3 biti deja verificati
    55 0000003C E2E1                            loop repeta_2
    56                                          gata:
    57 0000003E 58                              pop eax
    58 0000003F 3B1D[24000000]                  cmp ebx, [check]
    59 00000045 7C08                            jl next
    60 00000047 AB                              stosd
    61 00000048 8305[20000000]01                add dword [len2], 1
    62                                          next:
    63 0000004F 59                              pop ecx
    64 00000050 83C604                          add esi, 4
    65 00000053 E2BC                            loop repeta_1
    66                                          final:
    67                                          
    68 00000055 8B1D[20000000]                  mov ebx, [len2] 
    69 0000005B 01DB                            add ebx, ebx
    70 0000005D 01DB                            add ebx, ebx
    71 0000005F 01DB                            add ebx, ebx
    72 00000061 8D741EFC                        lea esi, [esi+ebx-4]
    73 00000065 8D3D[B5000000]                  lea edi, [sol+98]
    74 0000006B 8B0D[20000000]                  mov ecx, [len2]
    75                                      repeta_3:
    76 00000071 FD                              std
    77 00000072 AD                              lodsd
    78 00000073 51                              push ecx
    79 00000074 B920000000                      mov ecx, 32
    80                                      repeta_4:
    81 00000079 83F800                          cmp eax, 0
    82 0000007C 7420                            je gata_1
    83 0000007E D1E8                            shr eax,1
    84 00000080 720E                            jc unu
    85 00000082 50                              push eax
    86 00000083 B030                            mov al, '0'
    87 00000085 AA                              stosb
    88 00000086 8005[B7000000]01                add byte[len3], 1
    89 0000008D 58                              pop eax
    90 0000008E EB0C                            jmp urm
    91                                          unu:
    92 00000090 50                              push eax
    93 00000091 B031                            mov al, '1'
    94 00000093 AA                              stosb
    95 00000094 8005[B7000000]01                add byte[len3], 1
    96 0000009B 58                              pop eax
    97                                          urm:
    98 0000009C E2DB                            loop repeta_4
    99                                          gata_1:
   100 0000009E 50                              push eax
   101 0000009F B020                            mov al, ' '
   102 000000A1 8005[B7000000]01                add byte[len3], 1
   103 000000A8 AA                              stosb
   104 000000A9 58                              pop eax
   105 000000AA 59                              pop ecx
   106 000000AB E2C4                            loop repeta_3
   107 000000AD 660FB60D[B7000000]              movzx cx, byte[len3]
   108 000000B5 0FB7C9                          movzx ecx, cx
   109 000000B8 BB[53000000]                    mov ebx, sol
   110 000000BD 83C364                          add ebx, 100
   111 000000C0 29CB                            sub ebx, ecx
   112 000000C2 53                              push ebx
   113 000000C3 68[50000000]                    push dword format
   114 000000C8 FF15[00000000]                  call [printf]
   115 000000CE 83C408                          add esp,4*2
   116                                          ; exit(0)
   117 000000D1 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   118 000000D3 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
