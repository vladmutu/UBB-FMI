     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, fopen, fprintf, fclose             ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import scanf msvcrt.dll
    10                                  import fprintf msvcrt.dll
    11                                  import fopen msvcrt.dll
    12                                  import fclose msvcrt.dll
    13                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17                                      ; ...
    18 00000000 41646976422E747874-         nume_fisier db "AdivB.txt", 0
    18 00000009 00                 
    19 0000000A 7700                        mod_acces db "w", 0
    20 0000000C FFFFFFFF                    descriptor_fisier dd -1
    21                                      
    22 00000010 636174203D2000              message_1 db "cat = ", 0
    23 00000017 72657374203D2000            message_2 db "rest = ", 0
    24                                      
    25 0000001F 00000000                    a dd 0
    26 00000023 00000000                    b dd 0
    27 00000027 00000000                    cat dd 0
    28 0000002B 00000000                    r dd 0
    29                                      
    30 0000002F 0D0A00                      endl db 13, 10 ,0
    31                                      
    32 00000032 256400                      format_1 db "%d", 0
    33                                  ; our code starts here
    34                                  segment code use32 class=code
    35                                      start:
    36                                          ; ...
    37 00000000 68[1F000000]                    push dword a
    38 00000005 68[32000000]                    push dword format_1
    39 0000000A FF15[00000000]                  call [scanf]
    40 00000010 83C408                          add esp, 4*2
    41                                          
    42 00000013 68[23000000]                    push dword b
    43 00000018 68[32000000]                    push dword format_1
    44 0000001D FF15[00000000]                  call [scanf]
    45 00000023 83C408                          add esp, 4*2
    46                                          
    47 00000026 BA00000000                      mov edx, 0
    48 0000002B A1[1F000000]                    mov eax, [a]
    49 00000030 8B1D[23000000]                  mov ebx, [b]
    50 00000036 83FB00                          cmp ebx, 0
    51 00000039 0F84D3000000                    je final
    52                                          
    53 0000003F 50                              push eax
    54 00000040 83C030                          add eax, '0'
    55                                          
    56 00000043 A3[00000000]                    mov [nume_fisier], eax
    57                                          
    58 00000048 58                              pop eax
    59                                          
    60 00000049 C605[01000000]64                mov byte [nume_fisier+1], 'd'
    61 00000050 C605[02000000]69                mov byte [nume_fisier+2], 'i'
    62 00000057 C605[03000000]76                mov byte [nume_fisier+3], 'v'
    63                                          
    64 0000005E 53                              push ebx
    65 0000005F 83C330                          add ebx, '0'
    66                                          
    67 00000062 891D[04000000]                  mov [nume_fisier+4], ebx
    68                                          
    69 00000068 5B                              pop ebx
    70                                          
    71 00000069 F7F3                            div ebx
    72                                          
    73 0000006B A3[27000000]                    mov [cat], eax
    74 00000070 8915[2B000000]                  mov [r], edx
    75                                          
    76 00000076 68[0A000000]                    push dword mod_acces
    77 0000007B 68[00000000]                    push dword nume_fisier
    78 00000080 FF15[00000000]                  call [fopen]
    79 00000086 83C408                          add esp, 4*2
    80                                          
    81 00000089 A3[0C000000]                    mov [descriptor_fisier], eax
    82                                          
    83 0000008E 83F800                          cmp eax, 0 
    84 00000091 747F                            je final
    85                                          
    86 00000093 68[10000000]                    push dword message_1
    87 00000098 FF35[0C000000]                  push dword [descriptor_fisier]
    88 0000009E FF15[00000000]                  call [fprintf]
    89 000000A4 83C408                          add esp, 4*2
    90                                          
    91 000000A7 FF35[27000000]                  push dword [cat]
    92 000000AD 68[32000000]                    push dword format_1
    93 000000B2 FF35[0C000000]                  push dword [descriptor_fisier]
    94 000000B8 FF15[00000000]                  call [fprintf]
    95 000000BE 83C40C                          add esp, 4*3
    96                                          
    97 000000C1 68[2F000000]                    push dword endl
    98 000000C6 FF35[0C000000]                  push dword [descriptor_fisier]
    99 000000CC FF15[00000000]                  call [fprintf]
   100 000000D2 83C408                          add esp, 4*2
   101                                          
   102 000000D5 68[17000000]                    push dword message_2
   103 000000DA FF35[0C000000]                  push dword [descriptor_fisier]
   104 000000E0 FF15[00000000]                  call [fprintf]
   105 000000E6 83C408                          add esp, 4*2
   106                                          
   107 000000E9 FF35[2B000000]                  push dword [r]
   108 000000EF 68[32000000]                    push dword format_1
   109 000000F4 FF35[0C000000]                  push dword [descriptor_fisier]
   110 000000FA FF15[00000000]                  call [fprintf]
   111 00000100 83C40C                          add esp, 4*3
   112                                          
   113 00000103 FF35[0C000000]                  push dword [descriptor_fisier]
   114 00000109 FF15[00000000]                  call [fclose]
   115 0000010F 83C404                          add esp, 4
   116                                          final:
   117                                          ; exit(0)
   118 00000112 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   119 00000114 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
