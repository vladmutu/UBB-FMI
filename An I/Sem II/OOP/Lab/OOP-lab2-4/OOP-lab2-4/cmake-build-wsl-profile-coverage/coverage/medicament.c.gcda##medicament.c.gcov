        -:    0:Source:/mnt/c/Users/Omen/CLionProjects/OOP-lab2-4/medicament.c
        -:    0:Graph:/mnt/c/Users/Omen/CLionProjects/OOP-lab2-4/cmake-build-wsl-profile-coverage/CMakeFiles/OOP_lab2_4.dir/medicament.c.gcno
        -:    0:Data:/mnt/c/Users/Omen/CLionProjects/OOP-lab2-4/cmake-build-wsl-profile-coverage/CMakeFiles/OOP_lab2_4.dir/medicament.c.gcda
        -:    0:Runs:1
        -:    1:#include "medicament.h"
        -:    2:#include <stdlib.h>
        -:    3:#include <string.h>
        -:    4:
function createMedicament called 41 returned 100% blocks executed 100%
       41:    5:Medicament* createMedicament(int id, char* nume, float concentratie, int stoc)
        -:    6:{
       41:    7:    Medicament* p =(Medicament*) malloc(sizeof(Medicament));
        -:    8:
       41:    9:    p->id = id;
        -:   10:
       41:   11:    int nr = (int)strlen(nume) + 1;
       41:   12:    p->nume = (char*)malloc(sizeof(char)*nr);
       41:   13:    strcpy(p->nume, nume);
        -:   14:
       41:   15:    p->concentratie = concentratie;
       41:   16:    p->stoc = stoc;
        -:   17:
       41:   18:    return p;
       41:   18-block  0
        -:   19:}
        -:   20:
function copyMedicament called 20 returned 100% blocks executed 100%
       20:   21:Medicament* copyMedicament(Medicament* m)
        -:   22:{
       20:   23:    Medicament *p = (Medicament*) malloc(sizeof(Medicament));
       20:   24:    p->id = m->id;
       20:   25:    p->nume = (char*)malloc(sizeof(char)*(strlen(m->nume)+1));
       20:   26:    strcpy(p->nume,m->nume);
       20:   27:    p->concentratie = m->concentratie;
       20:   28:    p->stoc = m->stoc;
        -:   29:
       20:   30:    return p;
       20:   30-block  0
        -:   31:}
        -:   32:
        -:   33:
function destroyMedicament called 61 returned 100% blocks executed 100%
       61:   34:void destroyMedicament(Medicament* p)
        -:   35:{
       61:   36:    free(p->nume);
       61:   37:    free(p);
       61:   38:}
        -:   39:
        -:   40:
function getId called 4 returned 100% blocks executed 100%
        4:   41:int getId(Medicament* p)
        -:   42:{
        4:   43:    return p->id;
        4:   43-block  0
        -:   44:}
        -:   45:
        -:   46:/*
        -:   47:char* getNume(Medicament* p)
        -:   48:{
        -:   49:    return p->nume;
        -:   50:}
        -:   51:*/
function getStoc called 25 returned 100% blocks executed 100%
       25:   52:int getStoc(Medicament* p)
        -:   53:{
       25:   54:    return p->stoc;
       25:   54-block  0
        -:   55:}
        -:   56:
        -:   57:/*
        -:   58:float getConcentratie(Medicament* p)
        -:   59:{
        -:   60:    return p->concentratie;
        -:   61:}
        -:   62:*/
function setStoc called 2 returned 100% blocks executed 100%
        2:   63:void setStoc(Medicament* p,int stoc)
        -:   64:{
        2:   65:    p->stoc = stoc;
        2:   66:}
        -:   67:
function valideazaMedicament called 30 returned 100% blocks executed 100%
       30:   68:int valideazaMedicament(Medicament* m)
        -:   69:{
       30:   70:    if(m->id<=0)
       30:   70-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 28
        2:   71:        return -1;
        2:   71-block  0
       28:   72:    if(m->stoc<=0)
       28:   72-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 27
        1:   73:        return -1;
        1:   73-block  0
       27:   74:    if(strlen(m->nume)<2)
       27:   74-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 26
        1:   75:        return -1;
        1:   75-block  0
       26:   76:    if(m->concentratie<=0)
       26:   76-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 25
        1:   77:        return -1;
        1:   77-block  0
        -:   78:
       25:   79:    return 1;
       25:   79-block  0
        -:   80:}
        -:   81:
function getNume called 20 returned 100% blocks executed 100%
       20:   82:char* getNume(Medicament* m)
        -:   83:{
       20:   84:    return m->nume;
       20:   84-block  0
        -:   85:}
