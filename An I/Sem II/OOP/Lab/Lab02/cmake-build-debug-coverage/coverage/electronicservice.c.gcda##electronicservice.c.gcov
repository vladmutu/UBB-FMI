        -:    0:Source:D:/UBB-FMI/An I/Sem II/OOP/Lab/Lab02/electronicservice.c
        -:    0:Graph:D:\UBB-FMI\An I\Sem II\OOP\Lab\Lab02\cmake-build-debug-coverage\CMakeFiles\Lab02.dir\electronicservice.c.gcno
        -:    0:Data:D:\UBB-FMI\An I\Sem II\OOP\Lab\Lab02\cmake-build-debug-coverage\CMakeFiles\Lab02.dir\electronicservice.c.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by vladm on 3/12/2024.
        -:    3://Source file service pentru electrocasnice
        -:    4:#include <stdio.h>
        -:    5:#include "electronicservice.h"
        -:    6:
        -:    7:/*
        -:    8: * functie service de adaugare a unui electrocasnic in lista de electrocasnice
        -:    9: */
function addElectronicService called 2 returned 100% blocks executed 100%
        2:   10:int addElectronicService(MyList* Electronics, int ID, char type[], char producer[], char model[], int price, int quantity)
        -:   11:{
        2:   12:    Electronic elem = createElectronic(ID, type, producer, model, price, quantity);
        2:   12-block  0
call    0 returned 2
        2:   13:    int error = validateElectronic(elem);
call    0 returned 2
        2:   14:    if(error == 1)
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   15:        return 1;
        1:   15-block  0
        -:   16:    else
        -:   17:    {
        1:   18:        add(Electronics, elem);
        1:   18-block  0
call    0 returned 1
        1:   19:        return 0;
        -:   20:    }
        -:   21:}
        -:   22:
        -:   23:/*
        -:   24: * functie service de actualizare a pretului sau cantitatii unui electrocasnic
        -:   25: */
function updateElectronicService called 4 returned 100% blocks executed 100%
        4:   26:int updateElectronicService(MyList* Electronics, int ID, int price, int quantity)
        -:   27:{
        4:   28:    if(price == -1)
        4:   28-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 3
        -:   29:    {
        1:   30:        if(quantity != -1)
        1:   30-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        2:   31:            for(int i = 0; i < Electronics->lg; i++)
        1:   31-block  0
        1:   31-block  1
        2:   31-block  2
branch  0 taken 1
branch  1 taken 1
        1:   32:                if(Electronics->elems[i].ID == ID)
        1:   32-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   33:                    Electronics->elems[i].quantity = quantity;
        1:   33-block  0
        3:   34:    } else if(quantity == -1)
        3:   34-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        -:   35:    {
        2:   36:        for(int i = 0; i < Electronics->lg; i++)
        1:   36-block  0
        1:   36-block  1
        2:   36-block  2
branch  0 taken 1
branch  1 taken 1
        1:   37:            if(Electronics->elems[i].ID == ID)
        1:   37-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   38:                Electronics->elems[i].price = price;
        1:   38-block  0
        -:   39:    } else {
        4:   40:        for(int i = 0; i < Electronics->lg; i++)
        2:   40-block  0
        2:   40-block  1
        4:   40-block  2
branch  0 taken 2
branch  1 taken 2 (fallthrough)
        2:   41:            if(Electronics->elems[i].ID == ID) {
        2:   41-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        2:   42:                Electronics->elems[i].price = price;
        2:   43:                Electronics->elems[i].quantity = quantity;
        2:   43-block  0
        -:   44:            }
        -:   45:    }
        4:   46:    return 0;
        4:   46-block  0
        -:   47:}
        -:   48:
        -:   49:/*
        -:   50: * functie service se stergere a unui electrocasnic
        -:   51: */
function deleteElectronicService called 1 returned 100% blocks executed 100%
        1:   52:int deleteElectronicService(MyList* Electronics, int ID)
        -:   53:{
        -:   54:    int poz;
        2:   55:    for(int i = 0; i < Electronics->lg; i++)
        1:   55-block  0
        1:   55-block  1
        2:   55-block  2
branch  0 taken 1
branch  1 taken 1 (fallthrough)
        1:   56:        if( Electronics->elems[i].ID == ID)
        1:   56-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   57:            poz = i;
        1:   57-block  0
        1:   58:    int error = delete(Electronics, poz);
        1:   58-block  0
call    0 returned 1
        1:   59:    return 0;
        -:   60:}
        -:   61:
        -:   62:/*
        -:   63: * functie de actualizare a cantitatii
        -:   64: */
function updateQuantity called 3 returned 100% blocks executed 100%
        3:   65:int updateQuantity(MyList* Electronics, int ID, int quantity)
        -:   66:{
        6:   67:    for(int i = 0; i < Electronics->lg; i++)
        3:   67-block  0
        3:   67-block  1
        6:   67-block  2
branch  0 taken 3
branch  1 taken 3 (fallthrough)
        3:   68:        if(Electronics->elems[i].ID == ID)
        3:   68-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        -:   69:        {
        3:   70:            Electronics->elems[i].quantity += quantity;
        3:   70-block  0
        -:   71:        }
        3:   72:    return 0;
        3:   72-block  0
        -:   73:}
