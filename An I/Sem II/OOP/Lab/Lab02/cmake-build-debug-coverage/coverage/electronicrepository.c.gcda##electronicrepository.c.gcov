        -:    0:Source:D:/UBB-FMI/An I/Sem II/OOP/Lab/Lab02/electronicrepository.c
        -:    0:Graph:D:\UBB-FMI\An I\Sem II\OOP\Lab\Lab02\cmake-build-debug-coverage\CMakeFiles\Lab02.dir\electronicrepository.c.gcno
        -:    0:Data:D:\UBB-FMI\An I\Sem II\OOP\Lab\Lab02\cmake-build-debug-coverage\CMakeFiles\Lab02.dir\electronicrepository.c.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by vladm on 3/12/2024.
        -:    3://source file pentru repository-ul electrocasnicelor
        -:    4:#include "electronicrepository.h"
        -:    5:#include <stdlib.h>
        -:    6:#define INITIAL_CAPACITY 10
        -:    7:
        -:    8:/*
        -:    9: * creaza o lista
        -:   10: * post lista sa fie goala, lg = 0
        -:   11: *
        -:   12: */
function createEmpty called 10 returned 100% blocks executed 100%
       10:   13:MyList* createEmpty()
        -:   14:{
       10:   15:    MyList* list = (MyList*)malloc(sizeof(MyList));
       10:   16:    list -> elems = (Electronic*)malloc(INITIAL_CAPACITY* sizeof(Electronic));
       10:   17:    list -> capacity = INITIAL_CAPACITY;
       10:   18:    list -> lg = 0;
       10:   19:    return list;
       10:   19-block  0
        -:   20:}
        -:   21:
        -:   22:/*
        -:   23: * distruge o lista
        -:   24: */
function destroy called 1 returned 100% blocks executed 100%
        1:   25:void destroy(MyList *list)
        -:   26:{
        1:   27:    free(list->elems);
        1:   28:    free(list);
        1:   29:}
        -:   30:
        -:   31:/*
        -:   32: * functie de marire a capacitatii listei dinamice
        -:   33: * newCapacity = 2 * oldCapacity
        -:   34: */
function resize called 3 returned 100% blocks executed 100%
        3:   35:void resize(MyList* list)
        -:   36:{
        3:   37:    int nCap = 2*list->capacity;
        3:   38:    Electronic * nElems=malloc(nCap*sizeof(Electronic));
        -:   39:    int i;
       15:   40:    for (i = 0; i < list->lg; i++) {
        3:   40-block  0
       15:   40-block  1
branch  0 taken 12
branch  1 taken 3 (fallthrough)
       12:   41:        nElems[i] = list->elems[i];
       12:   41-block  0
        -:   42:    }
        3:   43:    free(list->elems);
        3:   44:    list->elems = nElems;
        3:   45:    list->capacity = nCap;
        3:   46:}
        -:   47:
        -:   48:/*
        -:   49: * functie de adaugare a unui element in lista
        -:   50: * post lgNew = lgOld+1
        -:   51: */
function add called 19 returned 100% blocks executed 100%
       19:   52:void add(MyList* list, Electronic elem)
        -:   53:{
       19:   54:    if(list->lg == list->capacity)
       19:   54-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 18
        1:   55:        resize(list);
        1:   55-block  0
call    0 returned 1
       19:   56:    list->elems[list->lg] = elem;
       19:   57:    list->lg++;
       19:   58:}
        -:   59:
        -:   60:
        -:   61:/*
        -:   62: * returneaza elementul din lista de la pozitia poz
        -:   63: * poz este luat ca fiind o pozitie valida in lista
        -:   64: */
        -:   65:
        -:   66:/*
        -:   67: * functie de stergere a unui electrocasnic din lista de electrocasnice
        -:   68: */
function delete called 2 returned 100% blocks executed 100%
        2:   69:int delete(MyList* list, int index)
        -:   70:{
        3:   71:    for (int i = index; i < list->lg - 1; i++) {
        2:   71-block  0
        3:   71-block  1
branch  0 taken 1
branch  1 taken 2 (fallthrough)
        1:   72:        list->elems[i] = list->elems[i + 1];
        1:   72-block  0
        -:   73:    }
        2:   74:    list->lg--;
        2:   75:    return 0;
        2:   75-block  0
        -:   76:}
